<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3.0//EN"
                      "https://docbook.org/xml/4.3/docbookx.dtd">
<article revision="20251101">
  <title>Building XOM</title>

   <para>
     First you'll need to clone the source from Github.
     This unpacks into a directory named "xom".
   </para>
  
   <para>
     XOM includes an Ant build file. You can build XOM with Ant 1.10 or later.
     Although all the code compiles back to Java 1.5,
     the build is targeted at Java 1.6 because it's hard to find a compiler
     that supports older versions these days.
  </para>

  <para>
    Building XOM requires Apache Ant. If you don't already have it installed,
    download it from <ulink url="https://ant.apache.org/">https://ant.apache.org/</ulink>.
    Be sure to add the ant/bin directory to your path and point the
    ANT_HOME environment variable to wherever you've installed Ant, as explained in the 
    <ulink url="https://ant.apache.org/manual/index.html">Ant 
    documentation</ulink>. Also set the JAVA_HOME environment variable to the location of your JDK, 
  </para>
  
  <para>
    Once you've done this, just type "ant" in the XOM directory to see the list of available targets:
  </para>
  
  <screen>[XOM]$ ant
<computeroutput>Buildfile: build.xml

help:
     [echo] 
     [echo] XOM Build file
     [echo] -------------------------------------------------------------
     [echo]     
     [echo]   available targets are:
     [echo]     
     [echo]     help           --> print this message
     [echo]     jar            --> build the xom.jar file
     [echo]     samples        --> build the xom-samples.jar file
     [echo]     compile        --> compile the source code
     [echo]     javadoc        --> generate the API documentation
     [echo]     betterdoc      --> better formatted API documentation
     [echo]     test           --> run JUnit test suite
     [echo]     integration    --> run JUnit integration test suite (broken)
     [echo]     testui         --> run JUnit test suite in GUI 
     [echo]     clean          --> clean up the build directory
     [echo]     dist           --> the zip and .tar.gz files
     [echo]     upload         --> upload archive files
     [echo]       
     [echo]   Use the option -Dfat=true to make Text objects bigger but faster.
     [echo] 
     [echo] -------------------------------------------------------------
     [echo] 
</computeroutput></screen>
  
 <para>
    Most of these are self-explanatory. 
    Typing "ant compile" compiles the source base into the directory build/classes.
    Typing "ant jar" compiles the files and stuffs them into a JAR archive. Typing "ant javadoc"
    compiles the API documentation, etc. However, there are a couple of special cases to note:
  </para>

 <articleinfo>
     <author>
      <firstname>Elliotte</firstname>
      <othername>Rusty</othername>
      <surname>Harold</surname>
    </author>
    <authorinitials>ERH</authorinitials>
    <copyright>
      <year>2004, 2023, 2025</year>
      <holder>Elliotte Rusty Harold</holder>
    </copyright>
  </articleinfo>

</article>
