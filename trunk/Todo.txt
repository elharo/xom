Todo:

1.3:
---

digital signatures?
encryption?

1.2:
-----

DTD API?

1.1:
-------

XPath support

A util package with the most useful samples and contribs

Figure out a way to allow users to configure different text storage algorithms,
all stored as byte arrays.
Possibilities:

System property
Method in text class and Builder

StAX Builder and converter sample to test API and implementation

a getDescendants methods in ParentNode????

a method to insert a Nodes in a Nodes


1.0.1:
--------
DHollenbeck suggests that implementing Array lists directly in ParentNode
rather than using Collections API would save memory and time.
See http://lists.ibiblio.org/pipermail/xom-interest/2004-January/000898.html

Optimize toXML for Elements and Documents by adding a package private
toXML(StringBuffer method)

dvholten suggests zipping characters.dat to save space

Can XInclude be rewritten to be non-recursive?


Before 1.0:
-----------

Make all JavaDoc valid XHTML and verify this with validator;
to do this we need an XHTML doclet; no let's use Tidy or jtidy 
on the javadoc through an ant task

Spell check

Line length corrections; would jalopy help?

Add a class hierarchy diagram to nu.xom package.html

Add information about O(1), O(length) etc. to JavaDoc

Finish tutorial

Check Javadoc guidelines at Sun for where to capitalize and put periods.
Bottom line: don't capitalize first word; use period only at end of complete sentences;
or for multisentence comments; use lower case non code-tagged to distinguish objects from classes

Add some see directives to JavaDoc

redo copyright and license notice to use /* */ instead of //
comments????

Add JavaDoc comments to unit tests that describe what each test tests

Look into a code beautifier for the line length

Look at the order of the methods in the various classes;
see if they make sense

register XOM as a trademark

Before beta:
-----------

Use better URI parsing and verification;
replace Xerces verification

Use more fixtures to clean up unit tests.

Add an ant task on JCSC?

write ant tasks to generate 
 partial jars as for ICU4j and Xerces
 
What can be cut from Xerces jar? WML and HTML perhaps? schemas?
build with dtdjars

what can be cut from xalan, build without xsltc or with only xsltc????

Add more encoding classes, particularly for Japanese and Chinese;
see what Xerces supports. It would be nice to support all these
on output.

with XIncluder would it make more sense to use a private class
that stores all the variables rather than constantly passing them
back and forth from static methods? That is, make private methods instance 
methods rather than static????

Use TestDox to create docs for unit tests???? make sure names make sense in
that context?????

Finish XSLT test suite????
Post a "Punch bull in fac" note on cafe con Leche
saying XSLT 1.0 suite had been discontinued?

See Apache for code contributor license contract

Before alpha:
------------

remove recursion from DOMConverter

Change XINCLUDE_NS????

cowan suggests always escaping C1 controls????

===============
Done 1.0d25:
===============

The checkFoo methods have been eliminated. All
setter and mutator methods in the node classes are now non-final.

NodeFactory.makeDocument has been renamed startMakingDocument
NodeFactory.endDocument has been renamed finishMakingDocument

Added a method to DOMConverter to convert a DocumentFragment to a Nodes

Added XSLTransform.toDocument() method that converts a Nodes to
a Document

Added UnavailableCharacterException, a subclass of XMLException,
 to be thrown when attempting to serialize a
character that is not available in the current charater set and cannot be escaped

Element.addAttribute is declared to throw the more specific MultipleParentException instead of 
IllegalAddException

Added a non-recursive serializer sample

Removed checkDetach() method from Node. It was redundant with
checkRemoveChild() in ParentNode.

Reursion has been eliminated from several methods in Element
to make it work better in very deep documents; notably
toXML(), getValue(), and getNamespaceURI(prefix)

The canonicalizer has been made non-recursive

ParentNode.replaceChild() will not remove the old child unless it can insert 
the new child. It can no longer do one but not the other.

Document.replaceChild now allows replacing of the DocType by another DocType
or the root element by another element

Element.removeChildren() now either removes all children or none.
It also returns a Nodes object containing the children removed

LeafNode has been removed. DocType, Text, Comment, and ProcessingINstrcution
now directly extend Node.

Removed hasChildren method from Element, Node, ParentNode, and Document

Much better testing of canonicalizer. I am now fairly convinced
it is correct in all or almost all cases. 

Line breaks are now used between declarations in internal DTD subset

Compiled jar without debugging symbols to save space.
(These can be turned on again easily enough in build.xml
if anyone needs them.)

Made a XOMSamples.jar

The core JAR archive is sealed

Many JavaDoc improvements


===============
Done 1.0d24:
===============

Fixed resource loading in servlet/multiclassloader environment

===============
Done 1.0d23:
===============

Added support for accept, accept-charset, and accept-language
attributes on include elements

MissingHrefException has been renamed  NoIncludeLocationException

XOMTestCase is part of the published API.

CircularInclusionException has been renamed InclusionLoopException

Factory methods are now invoked in document order. Previously this
wasn't true for text nodes, which weren't flushed until after 
the next tag, PI, etc. This was necessary to enable text nodes to
be maximally contiguous, though in fact they might not be if
the factory returned several text nodes in a row for non-text nodes.
In any case, with the default factory, or with a custom factory that
doesnot remove any nodes or change their base types (e.g. coment to Text)
text nodes are still maximum contiguous after a build.

Added support for GB18030 encoding on output
(requires Java 1.4)

IllegalDataException and its subclasses have getData and setData methods
to get and set the exact text that caused the exception.
IllegalNameException, IllegalCharacterDataException, and IllegalTargetException are now 
subclasses of IllegalDataException. IllegalCharacterDataException replaces most previous
uses of IllegalDataException.

NamespaceException has been subdivided into 
IllegalNameException, MalformedURIException, and NamespaceConflictException. 

Verifier is now based on table lookup. 

XOM no longer contains any JDOM code.

Removed NodeFactory makeWhiteSpaceInElementContent() method

Serialization speed-ups for Non-Unicode, non-Latin-1
encodings

It is now possible to supply a NodeFactory to XSLTransform to be used for
construcing nodes in the result tree

Improved support for IBM JVM 1.4.1

Added support for Thai in ISO-8859-11/TIS-620 encoding

Speeded up Serializer for non-Unicode/non-Latin-1 encodings

Attribute.Type.toXML is now Attribute.Type.getName(). This was necessary
to be consistent with handling attributes of type ENUMERATION, which is not a DTD keyword
though it is referenced in the Infoset.

Removed no-args constructors from the various exception classes.

The Nodes class now has insert and remove methods,
in addition to append. 

Supports the XInclude 2003 2nd last call working draft.
The methods that resolve Nodes objects have been marked private.

Added NoSuchAttributeException for parallelism with NoSuchChildException

Unit tests have been dramatically expanded. There are now over
700 separate test methods, many of which perform several tests.

No longer allow the namespace URI
http://www.w3.org/XML/1998/namespace
to have any prefix other than xml, per conformance with
the namespaces erratum

Allow the xml: prefix (with the right URI) to be used on elements
per conformance with the namespaces recommendation

NodeFactory make methods now return Nodes objects that may change the type
or number of nodes returned, subject to the ususal XML well-formedness constraints.

Better exception messages when name and namespace arguments are swapped

getBaseURI returns null if the base URI can't be determined due
to a malformed xml:base attribute. 

===============
Done 1.0d22:
===============

Serializer.preservebaseURI() is now Serializer.setPreserveBaseURI()

Carriage returns are no longer allowed in comment and processing instruction data
because they can't be roundtripped. (Character references aren't resolved inside
comment and processing instruction data.)

Initial white space is not longer allowed in processing instruction 
data because this cannot be roundtripped.

DOMConverter.translate methods have been renamed DOMConverter.convert

DOMConverter can now convert individual DOM nodes into XOM objects.
It is no longer limited to converting entire documents.

ValidityException now has a getDocument() method which returns the
complete well-formed but invalid document. It also has getValidityError(int n),
getLineNumber(int n), and getColumnNumber(int n) methods which return 
information about the successive validity errors in the document.

Numeric character references now use upper case.

In Serializer, writeMarkup has been renamed writeRaw and writeText 
has been renamed writeEscaped
since in subclasses these may not actually be writing markup

Much more fine-grained control of serialization from subclasses
using several new methods including writeXMLDeclaration(),
writeStartTag(), and writeEmptyElementTag().

Added an option to serialize using Unicode normalization form C.

Added a protected getColumnNumber() method to Serializer to assist subclasses that
wish to do implement their own line breaking strategies.

Can now specify a Builder to be used when XIncluding

More XPointer syntax errors are detected when XIncluding

NodeList has been renamed Nodes.

Java encoding names such as ISO8859_1 are now recognized on input
if Xerces is the parser. 

XIncludeException (and its subclasses) can now report the URI
of the document where the problem was detected

Upgraded to Xerces 2.6 nightly build to fix bug
involving relative URL resolution in documents 
loaded from redirected URLs

Added unit tests for SAXConverter

Added DatabaseBuilder sample based on Example 8-13 from Processing XML with Java

Silently preserve CDATA sections from parse to output when possible,

Added SourceCodeGenerator sample program that converts a well-formed XML
document into the XOM statements necessary to create the document

Renamed ParseException to ParsingException

===============
Done 1.0d21:
===============

Added checkDetach protected method in Node. Could this 
and checkRemoveChild in Document make code any simpler by preventing
detaching of root?

copy() method is no loinger final in node classes

Cycles (an element acting as its own ancestor)
are no longer allowed. Attempting to create one throws a
CycleException.

NodeFactory.makeDocument() no longer takes an Element as an argument.
It is the responsibility of the NodeFactory to construct a suitable root 
element. However, when parsing this will quickly be replaced by the 
actual root element.

Serializer.setIndent throws an IllegalArgumentException
for negative values

Fixed bug where line breaks would be added if indenting, even in elements
where xml:space="preserve"

XInclude now consistently treats XPointers that don't match any
subresource as resource errors, rather than including nothing.

xml:base attributes added to XIncluded elements no longer 
have fragment IDs

A couple more XPointer syntax errors are now detected when XIncluding

In XIncludeException the getRootCause and setRootCause() methods have
been replaced by initCause() and getCause().

The initCause method in the various exception classes 
is now much more consistent with its definition in Java 1.4.

XSLException no longer extends XMLException. This means it is now a checked
exception instead of a runtime exception.

Xalan 2.5.1 has replaced Saxon 6.5.2 as the bundled XSLT processor
due to a bug in SAXON that incorrectly reported document fragments 
resulting from XSL transforms 

Minor usability improvements and code cleanups in the build.xml file

Added an overview page to the API docs

Cleaned up the API docs, especially for the exception classes

===============
Done 1.0d20:
===============

build test now excludes MegaTest and XOMTestCase

Do not compress jar archive in order to load classes faster

build(File) now works properly on Windows. This fixes numerous
unit test failures in Windows


===============
Done 1.0d19:
===============

By default, the serializer and toXML methods now use
numeric character references to
to escape all tabs, carriage returns, and line feeds in 
attribute values and  carriage returns in text nodes. 
This helps make round tripping more reliable and robust.
However, if the user indicates that white space is not significant
by calling either setMaxLength or setIndent, then these characters
will not be preserved. If the user calls setLineSeparator,
then tabs will still be preserved but carriage returns and line
feeds may not be. 

Cleaned up unit tests

Major speed improvement in the Node.equals() method.
It now executes in about half the time.

For symmetry makeElement is now startMakingElement
endElement is now finishMakingElement.


Characters from Planes 1 to 15 are now escaped correctly 
by the serializer

===============
Done 1.0d18:
===============

Made XOMTestCase public, and cleaned up its code and API
for greater consistency with junit.framework.TestCase

Added support for streaming and partial builds by subclassing 
NodeFactory

===============
Done 1.0d17:
===============

XSLTransform is final

Added unit tests for toString methods and fixed various bugs 
thereby uncovered

IPv6 URIs of the form described in RFC 2732 are now allowed

Fixed various bugs in XInclude. It can now process all the test cases that
do not use the xpointer() scheme or unparsed entities.

The correct exception is now thrown when validating with Crimson.

You can now build with Crimson in Java 1.4.1

Removed numerous unused local variables thanks to pmd

Removed some duplicate code in Builder and Verifier thanks to Same

===============
Done 1.0d16:
===============

The standard jar file no longer includes the samples, tests, and benchmarks packages

Moved SAXConverter and DOMConverter out of the core package into a new 
nu.xom.converters package

Improved compatibility with Java 1.2

SAX filters can no longer bypass well-formedness checks

Worked around a Xerces and Crimson bug that inhibits relative URL
resolution from pathless base URLs such as 
http://www.cafeconleche.org 

The FibonacciSOAPClient sample program works now

More accurate exception messages from the XSLTransform constructors

XSLT unit tests

The distribution now includes the SAXON jar archive so that XSLT works with 
Java 1.3.

Fixed a nasty bug in Element.toXML that was making XSLT transforms
fail when elements were in the default namespace

You can now transform a NodeList as well as a complete document

Document.insertChild(DocType, position) now throws an IllegalAddException
if the Document already has a DocType, rather than silently replacing it.

===============
Done 1.0d15:
===============

Serializer no longer wraps and indents text when xml:space="preserve", 
regardless of the setting of indents and maxlength

XIncluder now has unit tests.

XIncluder now adds xml:base attributes to included elements as necessary

Fixed bug in Document and Element copy constructors that failed to preserve base URI.
This also fixes a bug in the XIncluder

The Element.getChildElements(String name, String namespaceURI method)
now allows a null or empty string local name to stand for any local name,
so you can use this method to get all elements in a certain namespace.
The null namespace is auto-converted to the empty string namespace.

===============
Done 1.0d14:
===============

Worked around some bugs in Xerces that caused the wrong exception
to be thrown when validating.

Improved compatibility with Crimson, the default parser
in Java 1.4

DOMConverter unit tests no longer depend on Xerces

insertChild(String, int) now throws a NullPointerException if String is null

Fixed a nasty bug in Document's copy constructor

Disallowed fragment identifiers in system literal URI references

Fixed several bugs involving the handling of
 notation and unparsed entity declarations in
the internal DTD subset

Added unit tests for internal DTD subset

Fixed build.xml to point at Xerces properly

NonVerifyingFactory for use with parser-created documents

Text class stores content in UTF-8 internally. This reduces memory usage but increases
execution time.

===============
Done 1.0d13:
===============

Several additional methods in Element were marked final (getAttributeCount(),
getNamespacePrefix(int index), removeChildren(),
and getAttribute(int))

Big memory optimizations

The arguments to insertChild (and checkInsertChild and checkRemoveChild) have been reversed.

removeChild now returns the Node it removes

Added support for EBCDIC-37

Fixed another bug on changing namespace URI in XHTML documents

If the Serializer's line separator is set, then all line separators are
changed to that separator on output. If the line separator is not explicitly
set, then all line breaks in source text are preserved as is.

The Builder method
    public Document build(String document, String baseURI) 
now throws an IOException in the event that an IOException occurs while
parsing the external DTD subset
    
Improved unit testing for the serializer and Builder

Removed the equals() and hashCode() methods from the XSLTransform class.
They're probably not necessary, and their behavior was underspecified. 

The public and system IDs of DocType can now be the empty string,
in conformance with the XML spec.
    
===============
Done 1.0d12:
===============

Removed insertBefore and insertAfter from ParentNode

Fixed a bug on changing namespace URI to empty string on 
an element that has attributes

===============
Done 1.0d11:
===============

Added an ANT build.xml file

Wrote unit test for all 6 build methods in Builder and for preserveBaseURI
in Serializer

Worked around bug in later versions of Xerces that doesn't like 
null entityresolvers

Allow base URIs that contain % escapes

Fixed bug that throws NullPointerException when serializing documents without a base URI
with preserveBaseURI set

===============
Done 1.0d10:
===============

Fixed namespace handling

===============
Done 1.0d9:
===============

Removed vestigial getNextSibling() and getPreviousSibling() methods from Document

In Comment:
   Renamed check to checkValue
   Renamed setData to setValue

In ProcessingInstruction:
   Renamed checkData to checkValue
   Renamed setData to setValue

In Text:
   Renamed check to checkValue
   Renamed setData to setValue

In ParentNode:
   Renamed checkRemove to checkRemoveChild for symmetry with checkInsertChild 
   Moved thee two methods down into Element:
   
     public final void appendChild(String text) {

Fixed Builder bug that prevented parsing File objects whose
filenames contained spaces and other non-URL legal characters 

Fixed equals() method in Attribute.Type to work in mutliclassloader
environments 

Corrected usage instructions in samples programs to include the package name
 
Added checks on values of xml:base attributes that they are legal IRIs.
Mainly this involves checking the hex escaping.
   
===================
Done 1.0d8:
===============

XSLT works modulo some obscure bugs in handling the
undeclaration of the default namespace. I need to get some 
clarification on the proper behavior of SAX processors to 
fix this. The TrAX XOMSource and XOMResult classes are not yet
public because I'm still thinking aobut the proper API for these,
but you can use the XSLTransform class for most use-cases. 

It is now possible to undeclare the default namespace on a prefixed element
by passing the empty string as the prefix and URI to declareNamespace().


===================
Done 1.0d7:
===============

Added constraint that an element cannot have two attributes with
same name, same namespace URI, but different prefixes.
Changed auto attribute replacement to depend on local name
and namespace URI and never on qualified name alone

Removed getFirstChild(), getPreviousSibling(), and getNextSibling()
methods from Node

Added indexOf() method to ParentNode

Spell checked the API documentation

Moved XOMResult into the nu.xom.xslt package. 
XSLT still doesn't work, but it's a little closer to working. 


===================
Done 1.0d6:
===============

Now require all namespace URIs to be absolute URI references

Fixed TextWriter bug that prevented the line separator from being changed

Fixed a bug that allowed the namespace URI of a prefixed element to
be reset to the empty string

Fixed a bug that allowed the prefix of an element to
something that conflicts with one of its attributes
or additional namespace declarations

Element.toXML now generates empty-element tags for empty elements

Fixed a bug that prevented the detach() method from working on leaf nodes

Fixed a bug pointed out by Laurent Bihanic in getNamespaceURI(String prefix)
that failed to return namespace URIs from more than one level up in the hierarchy

Fixed a cosmetic bug in the handling of nbsp in ISO-8859-11 Thai

Added a nu.xom.xincluder package to provide XInclude support
The samples package includes a driver program that uses this
to resolve XIncludes in existing documents.

Added a nu.xom.canonical package to provide Canonical XML output.
The samples package includes a driver program that can canonicalize 
existing documents.

Relative URLs in system identifiers for DTDs are now resolved against the base URI
of the document specified in the builder instead of the current working directory.
Apparently this wasn't being picked up from the InputSource. 
I had to add an EntityResolver to take care of this.
Should this really be necessary?
Is this perhaps a Xerces 2.1 bug? 

===================
Done 1.0d5:
===============

Added getName() equals(), hashCode(), and toString() methods to Attribute.Type,
mostly to make it safe for multi-classloader environments

Added a method to Builder to parse a java.io.File object

Added  methods to Builder that allow the base URI to be specified when
  building from a Reader or an InputStream
  
Added an experimental method to Builder that builds directly from a String 
containing well-formed XML. 

Cleaned up Builder internals to reduce duplicate code.

Fixed a Builder bug that was preventing the default XMLReader from being loaded
in some circumstances

Added support for the following character sets to Serializer:

    ISO-8859-2
    ISO-8859-3
    ISO-8859-4
    ISO-8859-5
    ISO-8859-6
    ISO-8859-7
    ISO-8859-8
    ISO-8859-9
    ISO-8859-10
    ISO-8859-11
    ISO-8859-13
    ISO-8859-14
    ISO-8859-15
    ISO-8859-16

Note that although XOM supports them, not all Java virtual machines do.

Serializer matches character set names case-insensitively as specified in the
XML specification.

Fixed a bug in UnicodeWriter that was preventing reserved characters 
such as & and < from being 
escaped when the encoding was some variant of Unicode. (This is more evidence 
that premature optimization is the root of all evil. I just couldn't resist an obvious optimization
in the UnicodeWriter class, and it came back to bite me in the ass.)

Fixed a bug with unnecessary xmlns="" declarations on root elements by Serializer
and toXML in Element

Fixed incorrect hexadecimal escape sequences generated by TextWriter



===================
Done 1.0d4:
===============


Write unit tests for getAttributeValue

renamed getStringForm toXML()

base URI property in Node 

Give Serializer an option to preserve base URIs by adding xml:base attributes

Added missing write(Docype) method to Serializer to
fix a nasty infinite loop
Fixed bug that did not undeclare default namespace as necessary

Could I make the Attributes class non-public by just adding
getAttribute(int i) method to Element?

Ditto for namespaces?

changed addAdditionalnamespace to declareNamespace

Changed readAttribute to getAttributeValue

Moved removeChildren from ParentNode into Element because it didn't work 
on Document.

Added protected methods to allow the monitoring of insertions and deletions
from subclasses of Element and Document

Added protected methods to allow the monitoring of 
additional namespace declarations from subclasses in Element

Added protected methods to allow the monitoring of 
changes of local name, prefix, and URI from subclasses in Element
